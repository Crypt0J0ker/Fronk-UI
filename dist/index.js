"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AcademyForceClient = void 0;
const ethers_1 = require("ethers");
const constants_1 = require("./constants");
const types_1 = require("./contracts/types");
const index_1 = require("./contracts/types/index");
class AcademyForceClient {
    constructor(_signer, _provider) {
        this._signer = _signer;
        this._provider = _provider;
    }
    static fromUrl(url) {
        const provider = new ethers_1.ethers.JsonRpcProvider(url);
        return new this(null, provider);
    }
    static fromChainId(chainId) {
        const provider = new ethers_1.ethers.JsonRpcProvider(constants_1.RPC_URLS[chainId]);
        return new this(null, provider);
    }
    get signer() {
        if (this._signer) {
            if (this._signer.provider) {
                return this._signer;
            }
            throw new Error("AcademyForce client signer has no provider");
        }
        throw new Error("AcademyForce client has no signer");
    }
    get provider() {
        var _a;
        if (this._provider) {
            return this._provider;
        }
        if ((_a = this._signer) === null || _a === void 0 ? void 0 : _a.provider) {
            return this._signer.provider;
        }
        throw new Error("AcademyForce client has no provider");
    }
    async getChainId() {
        const { chainId } = await this.provider.getNetwork();
        return Number(chainId);
    }
    async getContracts() {
        const chainId = await this.getChainId();
        const registryUV = types_1.Registry__factory.connect(constants_1.REGISTRY_ADDRESSES[chainId], this.provider);
        const _metaCoreAddress = await registryUV.getMetaCore();
        const _mfsAddress = await registryUV.getMFS();
        const _stableCoinAddress = await registryUV.getStableCoin();
        const _hMFSAddresses = new Array(constants_1.HMFS_COUNT);

        for (let i = 1; i < constants_1.HMFS_COUNT + 1; i++) {
            _hMFSAddresses[i - 1] = await registryUV.getHMFS(i);
        }
        const _metaCore = types_1.MetaCore__factory.connect(_metaCoreAddress, this.signer);
        const _metaPaymentAddress = await _metaCore.getPaymentChannelAddress();
        return {
            registry: types_1.Registry__factory.connect(constants_1.REGISTRY_ADDRESSES[chainId], this.signer),
            metaCore: _metaCore,
            metaPayment: index_1.MetaPayment__factory.connect(_metaPaymentAddress, this.signer),
            mfs: index_1.Erc20__factory.connect(_mfsAddress, this.signer),
            stablecoin: index_1.Erc20__factory.connect(_stableCoinAddress, this.signer),
        };
    }
    async claim(contract, name) {
        const address = await this.signer.getAddress();
        const academyForceNFT = types_1.AcademyForceNFT__factory.connect(contract, this.signer);
        let res;
        try {
            res = await fetch(process.env.NEXT_PUBLIC_BASE_URL + "/bck/fr/userClaimData", {
                method: "POST",
                body: JSON.stringify({ address, contract, name }),
                headers: { "Content-Type": "application/json" },
            });
        }
        catch (error) {
            return null;
        }
        const data = await res.json();
        const claim = await academyForceNFT.claim(data.address, data.name, data.v, data.r, data.s);
        return claim.wait();
    }
    async getBalancesOnWallet(account) {
        const { mfs, stablecoin } = await this.getContracts();
        const _address = account || (await this.signer.getAddress());
        const _balanceMFS = await mfs.balanceOf(_address);
        const _balanceStable = await stablecoin.balanceOf(_address);
        const _balanceMatic = await this.provider.getBalance(_address);

        return {
            mfs: ethers_1.ethers.utils.formatUnits(_balanceMFS, constants_1.DECIMALS),
            stablecoin: ethers_1.ethers.utils.formatUnits(_balanceStable, constants_1.DECIMALS),
            matic: ethers_1.ethers.utils.formatUnits(_balanceMatic, constants_1.DECIMALS),
        };
    }
    async getBalancesOnPayment(idUser) {
        const { mfs, stablecoin, metaPayment, metaCore } = await this.getContracts();
        const userId = idUser ||
            Number(await metaCore.getUserId(await this.signer.getAddress()));
        const _balanceMFS = await metaPayment.getBalance(mfs.address, userId);
        const _balanceStable = await metaPayment.getBalance(stablecoin.address, userId);
        
        return {
            mfs: ethers_1.ethers.utils.formatUnits(_balanceMFS, constants_1.DECIMALS),
            stablecoin: ethers_1.ethers.utils.formatUnits(_balanceStable, constants_1.DECIMALS),
            matic: "0.0"
        };
    }
}
exports.AcademyForceClient = AcademyForceClient;
//# sourceMappingURL=data:application/json;base64,