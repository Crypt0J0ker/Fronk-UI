import { __awaiter } from 'tslib'
import { Provider } from '@ethersproject/abstract-provider'
import { Signer } from '@ethersproject/abstract-signer'
import MultiCall from '@indexed-finance/multicall'
import { ethers } from 'ethers'
import { DECIMALS, FRONKXP_ADDRESSES, MAX_DAY, RPC_URLS } from './constants'
import { FronkXP__factory } from './contracts/types'
export class FronkWorldClient {
  constructor(signerOrProvider) {
    this.signerOrProvider = signerOrProvider
    this.signerOrProvider = signerOrProvider
    this.multi = new MultiCall(this.provider)
  }
  static fromUrl(url) {
    const provider = new ethers.providers.JsonRpcProvider(url)
    return new this(provider)
  }
  static fromChainId(chainId) {
    const provider = new ethers.providers.JsonRpcProvider(RPC_URLS[chainId])
    return new this(provider)
  }
  get signer() {
    if (Signer.isSigner(this.signerOrProvider)) {
      return this.signerOrProvider
    }
    throw new Error('FronkWorld client has no signer')
  }
  get provider() {
    if (Provider.isProvider(this.signerOrProvider)) {
      return this.signerOrProvider
    }
    if (!this.signerOrProvider.provider) {
      throw new Error('FronkWorld client has no provider')
    }
    return this.signerOrProvider.provider
  }
  getChainId() {
    return __awaiter(this, void 0, void 0, function* () {
      const { chainId } = yield this.provider.getNetwork()
      return Number(chainId)
    })
  }
  getContracts(readonly) {
    return __awaiter(this, void 0, void 0, function* () {
      const signerOrProvider = readonly ? this.provider : this.signer
      const chainId = yield this.getChainId()
      const fronkXP = FronkXP__factory.connect(
        FRONKXP_ADDRESSES[chainId],
        signerOrProvider
      )
      return {
        fronkXP,
      }
    })
  }
  getFronkXPBalance(userAddress) {
    return __awaiter(this, void 0, void 0, function* () {
      const { fronkXP } = yield this.getContracts()
      const userAddr = userAddress || (yield this.signer.getAddress())
      const balance = yield fronkXP.balanceOf(userAddr)
      const formattedBalance = ethers.utils.formatUnits(balance, DECIMALS)
      return Math.floor(formattedBalance)
    })
  }
  checkIfMintedToday(userAddress) {
    return __awaiter(this, void 0, void 0, function* () {
      const { fronkXP } = yield this.getContracts()
      const userAddr = userAddress || (yield this.signer.getAddress())
      const secondsInDay = 60 * 60 * 24
      const utcShiftSeconds = Number(yield fronkXP.utcShiftSeconds())
      const timestamp = Math.floor(Date.now() / 1000)
      const day = Math.floor((timestamp + utcShiftSeconds) / secondsInDay)
      return fronkXP.userMintedOnDay(userAddr, day)
    })
  }
  getMintStreak(userAddress) {
    return __awaiter(this, void 0, void 0, function* () {
      const { fronkXP } = yield this.getContracts()
      const userAddr = userAddress || (yield this.signer.getAddress())
      const mintStreak = yield fronkXP.userMintStreak(userAddr)
      return Number(mintStreak)
    })
  }
  getMintAmountForDay(day) {
    return __awaiter(this, void 0, void 0, function* () {
      const { fronkXP } = yield this.getContracts()
      if (day > MAX_DAY) {
        day = MAX_DAY
      }
      const mintAmount = yield fronkXP.mintAmounts(day - 1)
      return ethers.utils.formatUnits(mintAmount, DECIMALS)
    })
  }
  mint() {
    return __awaiter(this, void 0, void 0, function* () {
      const { fronkXP } = yield this.getContracts()
      const tx = yield fronkXP.mint()
      yield tx.wait()
    })
  }
}
//# sourceMappingURL=data:application/json;base64,
